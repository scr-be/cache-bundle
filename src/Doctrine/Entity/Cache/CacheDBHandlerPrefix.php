<?php

/*
 * This file is part of the Scribe Cache Bundle.
 *
 * (c) Scribe Inc. <source@scribe.software>
 *
 * For the full copyright and license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

namespace Scribe\CacheBundle\Doctrine\Entity\Cache;

use Doctrine\Common\Collections\ArrayCollection;
use Scribe\Doctrine\Base\Entity\AbstractEntity;
use Scribe\Doctrine\Behavior\Model\Sluggable\SluggableBehaviorTrait;
use Scribe\Doctrine\Exception\SubscriberEventORMException;

/**
 * Class CacheDBHandlerPrefix.
 */
class CacheDBHandlerPrefix extends AbstractEntity
{
    use SluggableBehaviorTrait;

    /**
     * Collection of cached items associated with prefix.
     *
     * @var null|ArrayCollection
     */
    protected $items;

    /**
     * Construct (init) the entity.
     */
    public function __construct()
    {
        parent::__construct();

        $this->items = new ArrayCollection();
    }

    /**
     * This entity must not have auto-generated slugs.
     *
     * @throws SubscriberEventORMException
     */
    public function getAutoSlugFields()
    {
        throw new SubscriberEventORMException(
            'This entity does not support automatically generating slugs!',
            SubscriberEventORMException::CODE_ORM_GENERIC
        );
    }

    /**
     * Disable auto-generated slugs.
     *
     * @return bool
     */
    public function isSlugAutoGenerated()
    {
        return false;
    }

    /**
     * Support casting to string.
     *
     * @return string
     */
    public function __toString()
    {
        return (string) get_class($this).':'.($this->getId() ?: 'not-em-managed');
    }

    /**
     * Get an array collection of the items associated with this prefix.
     *
     * @return ArrayCollection|null
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * Search the item associations for the provided item.
     *
     * @param CacheDbHandlerItem $item
     *
     * @return bool
     */
    public function hasItem(CacheDbHandlerItem $item)
    {
        if ($this->items->contains($item)) {
            return true;
        }

        return false;
    }
}

/* EOF */
